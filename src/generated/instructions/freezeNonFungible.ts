/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category FreezeNonFungible
 * @category generated
 */
export const freezeNonFungibleStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'FreezeNonFungibleInstructionArgs'
)
/**
 * Accounts required by the _freezeNonFungible_ instruction
 *
 * @property [_writable_] tokenAccount
 * @property [] tokenMint
 * @property [] tokenMintEdition
 * @property [_writable_, **signer**] signer
 * @property [_writable_] bunkr
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category FreezeNonFungible
 * @category generated
 */
export type FreezeNonFungibleInstructionAccounts = {
  tokenAccount: web3.PublicKey
  tokenMint: web3.PublicKey
  tokenMintEdition: web3.PublicKey
  signer: web3.PublicKey
  bunkr: web3.PublicKey
  tokenProgram?: web3.PublicKey
  tokenMetadataProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const freezeNonFungibleInstructionDiscriminator = [
  250, 150, 153, 203, 14, 140, 23, 13,
]

/**
 * Creates a _FreezeNonFungible_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category FreezeNonFungible
 * @category generated
 */
export function createFreezeNonFungibleInstruction(
  accounts: FreezeNonFungibleInstructionAccounts,
  programId = new web3.PublicKey('BunKrGBXdGxyTLjvE44eQXDuKY7TyHZfPu9bj2Ugk5j2')
) {
  const [data] = freezeNonFungibleStruct.serialize({
    instructionDiscriminator: freezeNonFungibleInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMintEdition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bunkr,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
